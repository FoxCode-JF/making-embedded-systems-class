/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MOTORCONTROLSCREENVIEWBASE_HPP
#define MOTORCONTROLSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/motorcontrolscreen_screen/MotorControlScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>

class MotorControlScreenViewBase : public touchgfx::View<MotorControlScreenPresenter>
{
public:
    MotorControlScreenViewBase();
    virtual ~MotorControlScreenViewBase() {}
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ButtonWithLabel pointlessButton;
    touchgfx::Circle motorControlArea;
    touchgfx::PainterRGB565 motorControlAreaPainter;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MotorControlScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // MOTORCONTROLSCREENVIEWBASE_HPP
